/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'sunzc' at '17-3-12 下午1:03' with Gradle 2.14.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
def gradleDir = "${rootProject.rootDir}/gradle"

buildscript {
  repositories {
    mavenLocal()
    jcenter()
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/milestone" }
    maven { url "http://repo.spring.io/plugins-release"}
  }

  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}"
  }
  
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'

// In this section you declare where to find the dependencies of your project
repositories {
  mavenLocal()
  jcenter()
  maven { url "http://repo.spring.io/snapshot" }
  maven { url "http://repo.spring.io/milestone" }
  maven { url "http://repo.spring.io/plugins-release"}
}

group = 'com.wei.you'
version = application_version

eclipse {
  classpath {
    downloadSources = true
    defaultOutputDir = file("build/classes/main") //file(project.getProjectDir().getAbsolutePath() + "/build/classes/main")
    containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
    containers "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-${java_version}"
  }
}

bootRepackage.enabled = true

sourceCompatibility = java_version
targetCompatibility = java_version

task createJavaProject << {
  sourceSets*.java.srcDirs*.each {
    it.mkdirs()
    (new File(it, '.gitkeep')).createNewFile()
  }
  sourceSets*.resources.srcDirs*.each {
    it.mkdirs()
    (new File(it, '.gitkeep')).createNewFile()
  }
}

configurations {
  providedRuntime
  // replaced with jcl-over-slf4j
  all*.exclude group: 'commons-logging', module: 'commons-logging'
  // replaced with log4j-over-slf4j
  all*.exclude group: 'log4j', module: 'log4j'
  // replaced
  // all*.exclude group: 'org.jboss.logging', module: 'jboss-logging'
  // replaced with custom
  // all*.exclude group: 'org.slf4j', module: 'slf4j-api'
  all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

springBoot {
  mainClass = 'com.wei.you.zhihu.spider.Application'
}

bootRepackage {
  mainClass = 'com.wei.you.zhihu.spider.Application'
}

// In this section you declare the dependencies for your production and test code
dependencies {
  compile "org.springframework.boot:spring-boot-starter-web:${spring_boot_version}"
  compile "org.springframework.boot:spring-boot-starter-thymeleaf:${spring_boot_version}"
  compile "org.springframework.boot:spring-boot-starter-actuator:${spring_boot_version}"
  compile "org.springframework.boot:spring-boot-starter-amqp:${spring_boot_version}"
  compile "org.mybatis.spring.boot:mybatis-spring-boot-starter:${spring_boot_mybatis}"  
  compile "com.alibaba:druid:${druid_version}"
  compile "commons-lang:commons-lang:${commons_lang_version}"
  compile "commons-io:commons-io:${commons_io_version}"
  compile "org.apache.commons:commons-lang3:${commons_lang3_version}"
  compile "commons-fileupload:commons-fileupload:${commons_fileupload_version}"
  compile "commons-codec:commons-codec:${commons_codec_version}"
  compile "org.thymeleaf.extras:thymeleaf-extras-conditionalcomments:${thymeleaf_extras_version}"
  compile "com.github.mxab.thymeleaf.extras:thymeleaf-extras-data-attribute:${thymeleaf_extras_attribute_version}"
  compile "mysql:mysql-connector-java:${mysql_connector_java_version}"
  compile "com.github.pagehelper:pagehelper:${page_version}"
  compile "net.sf.dozer:dozer:${dozer_version}"
  compile "com.google.guava:guava:${google_guava_version}"
  
  compile "org.projectlombok:lombok:${lombok_version}"
  compile "io.springfox:springfox-swagger2:${swagger_version}"
  compile "io.springfox:springfox-swagger-ui:${swagger_version}"
  compile "joda-time:joda-time:${joda_time_version}"
  compile "org.springframework.cloud:spring-cloud-starter-feign:${spring_cloud_feign}"
  compile "io.github.openfeign.form:feign-form:${feign_form_version}"
  compile "io.github.openfeign.form:feign-form-spring:${feign_form_version}" 
  compile "com.netflix.hystrix:hystrix-core:${hystrix_version}"
  compile "com.netflix.hystrix:hystrix-javanica:${hystrix_version}"
  compile "com.netflix.hystrix:hystrix-metrics-event-stream:${hystrix_version}"
  
  testCompile "org.springframework.boot:spring-boot-starter-test:${spring_boot_version}"
  testCompile "org.powermock:powermock-module-junit4:${org_powermock_version}"
  testCompile "org.powermock:powermock-api-mockito:${org_powermock_version}"
}

tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.12'
}
